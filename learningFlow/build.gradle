plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'learningFlow'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot 기본
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// 데이터베이스
	implementation 'mysql:mysql-connector-java:8.0.33'

	// 보안
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// 템플릿 엔진
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// 유틸리티
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// API 문서화
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	// 이메일
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// 테스트
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


	//QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

}

tasks.named('test') {
	useJUnitPlatform()
}


// QueryDsl 추가 설정
def generated = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += generated
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = file(generated)
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

